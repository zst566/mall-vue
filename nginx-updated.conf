# 添加 DNS 解析器配置
# resolver 127.0.0.11 valid=30s;

# 隐藏Nginx版本信息
server_tokens off;

# 定义上游服务器组 - 启用 Vue 前端代理
upstream vue_frontend {
    server mall-vue:80;
    keepalive 32;  # 保持连接池
}

# upstream node_backend {
#     server node_prod:5001;
#     keepalive 32;
# }

# upstream pc_prod {
#     server pc_prod:4000;
#     keepalive 32;
# }

# 限制请求频率（防DDoS）
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=20r/s;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=20r/s;

# 基础设置
gzip on;
gzip_min_length 1k;
gzip_comp_level 6;
gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
gzip_vary on;
gzip_disable "MSIE [1-6]\.";

# 请求大小限制
client_max_body_size 10M;

# 防止缓冲区溢出攻击
client_body_buffer_size 128k;
client_header_buffer_size 1k;
large_client_header_buffers 4 4k;

# HTTP server (redirect to HTTPS)
server {
    listen 80;
    server_name gdtvdv.com *.gdtvdv.com;
    
    # 禁用默认重定向
    absolute_redirect off;
    port_in_redirect off;

    # 所有请求重定向到 HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name gdtvdv.com *.gdtvdv.com;

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/gdtvdv.com.crt;
    ssl_certificate_key /etc/nginx/ssl/gdtvdv.com.key;
    
    # SSL settings
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # modern configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # 添加安全相关HTTP头部
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data:; style-src 'self' 'unsafe-inline';" always;
    # 开发环境：放宽CSP策略以支持开发工具和Vant图标
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.wx.qq.com res.wx.qq.com; img-src 'self' data: blob: *.wx.qq.com *.cdn.yzcdn.cn *.qpic.cn *.aliyuncs.com *.alicdn.com; style-src 'self' 'unsafe-inline' *.cdn.yzcdn.cn cdn.yzcdn.cn; font-src 'self' data: https://cdn.yzcdn.cn https://at.alicdn.com *.yzcdn.cn cdn.yzcdn.cn; connect-src 'self' *.aliyuncs.com *.alicdn.com wss: ws: https: http: localhost:* 127.0.0.1:*;" always;
    
    # 拒绝访问敏感文件
    location ~* \.(env|git|config|ini|conf|log|bak|sql)$ {
        deny all;
        return 403;
    }

    # 拒绝访问隐藏文件和目录
    location ~ /\. {
        deny all;
        return 403;
    }

    # 禁止特定的User-Agent
    if ($http_user_agent ~* (nmap|nikto|dirbuster|sqlmap|openvas|whatweb|metasploit)) {
        return 403;
    }

    # OSS静态资源代理 - 解决CORS问题
    location /oss/ {
        # 代理到阿里云OSS
        proxy_pass https://hxzx-pic-01.oss-cn-shenzhen.aliyuncs.com/;
        proxy_set_header Host hxzx-pic-01.oss-cn-shenzhen.aliyuncs.com;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 移除可能导致问题的头部
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        
        # 添加CORS支持
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Range, If-Range, If-Modified-Since, Cache-Control" always;
        add_header Access-Control-Expose-Headers "Content-Length, Content-Range, Accept-Ranges" always;
        
        # 缓存设置
        expires 1y;
        add_header Cache-Control "public, immutable, no-transform";
        
        # 处理OPTIONS预检请求
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Range, If-Range, If-Modified-Since, Cache-Control" always;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type "text/plain charset=UTF-8";
            return 204;
        }
        
        # 超时设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # 图片资源代理到Vue容器 - 启用
    location /images/ {
        proxy_pass http://vue_frontend/images/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 缓存设置
        expires 30d;
        add_header Cache-Control "public, no-transform";
        
        # 跨域支持
        add_header Access-Control-Allow-Origin "*" always;
    }

    # 前端页面请求转发 - 启用
    location / {
        # 禁止目录列表
        autoindex off;
        
        # 限制请求频率
        limit_req zone=general_limit burst=50 nodelay;
        
        proxy_pass http://vue_frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket 支持
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;

        # 缓存设置
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_valid 200 60m;
        proxy_cache_valid 404 1m;
    }
    
    # 特定文件访问 - 6Z5chpY6Bj.txt (最高优先级)
    location = /6Z5chpY6Bj.txt {
        root /usr/share/nginx/html;
        add_header Content-Type "text/plain" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }
    
    # 静态文件访问 - 允许访问html目录中的文件
    location ~* \.(txt|html|css|js|png|jpg|jpeg|gif|ico|svg)$ {
        root /usr/share/nginx/html;
        expires 1h;
        add_header Cache-Control "public, no-transform";
        add_header Content-Type "text/plain" always;
        
        # 尝试访问文件，如果不存在则返回404
        try_files $uri =404;
    }

    # 后端API请求 - 暂时屏蔽
    # location /api/ {
    #     # 限制API请求频率
    #     limit_req zone=api_limit burst=50 nodelay;

    #     # 现有的proxy配置
    #     proxy_pass http://node_backend;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     
    #     # 添加CORS头
    #     add_header 'Access-Control-Allow-Origin' '*' always;
    #     add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    #     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    #     add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    #     add_header 'Access-Control-Allow-Credentials' 'true' always;
    #     
    #     # 处理OPTIONS预检请求
    #     if ($request_method = 'OPTIONS') {
    #         add_header 'Access-Control-Allow-Origin' '*' always;
    #         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    #         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    #         add_header 'Access-Control-Max-Age' 1728000;
    #         add_header 'Content-Type' 'text/plain; charset=utf-8';
    #         add_header 'Content-Length' 0;
    #         return 204;
    #     }
    # }
    
    # API请求fallback响应
    location /api/ {
        return 503 "Service temporarily unavailable - Backend container not ready";
        add_header Content-Type "text/plain" always;
    }

    # API文档路由 - 暂时屏蔽
    # location /api-docs {
    #     # 限制API文档请求频率
    #     limit_req zone=api_limit burst=5 nodelay;
    #     
    #     proxy_pass http://node_backend;
    #     proxy_http_version 1.1;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     
    #     # 超时设置
    #     proxy_connect_timeout 60s;
    #     proxy_send_timeout 60s;
    #     proxy_read_timeout 60s;
    #     
    #     # 跨域头设置
    #     add_header 'Access-Control-Allow-Origin' $http_origin always;
    #     add_header 'Access-Control-Allow-Credentials' 'true' always;
    #     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    #     add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
    #     
    #     # 预检请求处理
    #     if ($request_method = 'OPTIONS') {
    #         add_header 'Access-Control-Max-Age' 1728000;
    #         add_header 'Content-Type' 'text/plain charset=UTF-8';
    #         add_header 'Content-Length' 0;
    #         return 204;
    #     }
    # }
    
    # API文档fallback响应
    location /api-docs {
        return 503 "Service temporarily unavailable - Backend container not ready";
        add_header Content-Type "text/plain" always;
    }

    # Uni-app相关路由 - 暂时屏蔽
    # location /uni {
    #     # 限制请求频率
    #     limit_req zone=api_limit burst=10 nodelay;
    #     
    #     proxy_pass http://node_backend;
    #     proxy_http_version 1.1;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;

    #     # 超时设置
    #     proxy_connect_timeout 60s;
    #     proxy_send_timeout 60s;
    #     proxy_read_timeout 60s;

    #     # 跨域头设置
    #     add_header 'Access-Control-Allow-Origin' $http_origin always;
    #     add_header 'Access-Control-Allow-Credentials' 'true' always;
    #     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    #     add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;

    #     # 预检请求处理
    #     if ($request_method = 'OPTIONS') {
    #         add_header 'Access-Control-Max-Age' 1728000;
    #         add_header 'Content-Type' 'text/plain charset=UTF-8';
    #         add_header 'Content-Length' 0;
    #         return 204;
    #     }
    # }
    
    # Uni-app路由fallback响应
    location /uni {
        return 503 "Service temporarily unavailable - Backend container not ready";
        add_header Content-Type "text/plain" always;
    }

    # PC管理端页面请求 - 暂时屏蔽
    # location /pc-admin/ {
    #     proxy_pass http://pc_prod/;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection 'upgrade';
    #     proxy_set_header Host $host;
    #     proxy_cache_bypass $http_upgrade;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;

    #     # WebSocket 支持
    #     proxy_read_timeout 300s;
    #     proxy_connect_timeout 75s;

    #     # 缓存设置
    #     proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
    #     proxy_cache_valid 200 60m;
    #     proxy_cache_valid 404 1m;
    # }
    
    # PC管理端fallback响应
    location /pc-admin/ {
        return 503 "Service temporarily unavailable - PC Admin container not ready";
        add_header Content-Type "text/plain" always;
    }

    # 错误页面
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}


