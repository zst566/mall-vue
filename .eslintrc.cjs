module.exports = {
  root: true,
  env: {
    node: true,
    browser: true,
    es2021: true,
  },
  extends: [
    'eslint:recommended',
    'plugin:vue/vue3-essential',
    '@vue/typescript/recommended',
    '@vue/eslint-config-prettier',
  ],
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
  },
  rules: {
    'vue/multi-word-component-names': 'off',
    'vue/no-unused-vars': 'warn',
    '@typescript-eslint/no-unused-vars': 'warn',
    '@typescript-eslint/no-explicit-any': 'warn',
    '@typescript-eslint/no-non-null-assertion': 'warn',
    'no-console': process.env.NODE_ENV === 'production' ? 'warn' : 'off',
    'no-debugger': process.env.NODE_ENV === 'production' ? 'warn' : 'off',
    'vue/no-deprecated-slot-attribute': 'warn',
    'vue/no-deprecated-slot-scope-attribute': 'warn',
    'vue/no-deprecated-v-bind-sync': 'warn',
    'vue/no-deprecated-v-slot-scope': 'warn',
    'vue/no-deprecated-vue-config-keycodes': 'warn',
    'vue/no-deprecated-vue-config': 'warn',
    'vue/padding-line-between-blocks': 'error',
    'vue/script-setup-uses-vars': 'error',
    'vue/no-unused-components': 'warn',
    'vue/component-tags-order': ['error', {
      order: ['script', 'template', 'style']
    }],
    'vue/require-default-prop': 'error',
    'vue/require-explicit-emits': 'error',
    'vue/require-name-property': 'error',
    'vue/require-v-for-key': 'error',
    'vue/v-bind-style': 'error',
    'vue/v-on-style': 'error',
    'vue/v-slot-style': 'error',
    'vue/order-in-components': 'error',
    'vue/html-closing-bracket-newline': 'error',
    'vue/html-closing-bracket-spacing': 'error',
    'vue/html-quotes': 'error',
    'vue/html-self-closing': ['error', {
      'html': {
        'void': 'always',
        'normal': 'always',
        'component': 'always'
      },
      'svg': 'always',
      'math': 'always'
    }],
    'vue/multiline-html-element-content-newline': 'error',
    'vue/max-attributes-per-line': ['error', {
      'singleline': {
        'max': 3
      },
      'multiline': {
        'max': 1
      }
    }],
    'vue/no-multi-spaces': 'error',
    'vue/no-spaces-around-equal-signs-in-attribute': 'error',
    'vue/one-component-per-file': 'error',
    'vue/first-attribute-linebreak': ['error', {
      'singleline': 'ignore',
      'multiline': 'below'
    }],
    'vue/singleline-html-element-content-newline': 'error',
    'vue/attribute-hyphenation': 'error',
    'vue/attributes-order': ['error', {
      order: [
        'DEFINITION',
        'LIST_RENDERING',
        'CONDITIONALS',
        'RENDER_MODIFIERS',
        'GLOBAL',
        'SLOT',
        'UNIQUENESS',
        'TWO_WAY_BINDING',
        'OTHER_DIRECTIVES',
        'OTHER_ATTR',
        'EVENTS',
        'CONTENT'
      ]
    }],
  },
  globals: {
    defineProps: 'readonly',
    defineEmits: 'readonly',
    defineExpose: 'readonly',
    withDefaults: 'readonly',
    ref: 'readonly',
    reactive: 'readonly',
    computed: 'readonly',
    watch: 'readonly',
    watchEffect: 'readonly',
    onMounted: 'readonly',
    onUnmounted: 'readonly',
    nextTick: 'readonly',
    shallowRef: 'readonly',
    shallowReactive: 'readonly',
    readonly: 'readonly',
    toRefs: 'readonly',
    toRef: 'readonly',
    unref: 'readonly',
    isRef: 'readonly',
    triggerRef: 'readonly',
    customRef: 'readonly',
    isProxy: 'readonly',
    isReactive: 'readonly',
    markRaw: 'readonly',
    proxyRefs: 'readonly',
    toRaw: 'readonly',
    useTemplateRef: 'readonly',
    onBeforeMount: 'readonly',
    onBeforeUnmount: 'readonly',
    onBeforeUpdate: 'readonly',
    onErrorCaptured: 'readonly',
    onRenderTracked: 'readonly',
    onRenderTriggered: 'readonly',
    onActivated: 'readonly',
    onDeactivated: 'readonly',
    createApp: 'readonly',
    h: 'readonly',
    inject: 'readonly',
    provide: 'readonly',
    resolveDirective: 'readonly',
    withDirectives: 'readonly',
    useSlots: 'readonly',
    useAttrs: 'readonly',
    createVNode: 'readonly',
    mergeProps: 'readonly',
    nextTick: 'readonly',
    onBeforeMount: 'readonly',
    onBeforeUnmount: 'readonly',
    onBeforeUpdate: 'readonly',
    onErrorCaptured: 'readonly',
    onMounted: 'readonly',
    onUnmounted: 'readonly',
    onUpdated: 'readonly',
    onServerPrefetch: 'readonly',
    onActivated: 'readonly',
    onDeactivated: 'readonly',
    onRenderTracked: 'readonly',
    onRenderTriggered: 'readonly',
  }
}